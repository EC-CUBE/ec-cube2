name: Penetration testing for EC-CUBE
on:
  schedule:
    - cron: '0 15 * * 1'
  push:
    branches:
      - '*'
    tags:
      - '*'
    paths:
      - '**'
      - '!*.md'
  pull_request:
    paths:
      - '**'
      - '!*.md'
jobs:
  PenetrationTest:
    name: Penetration testing
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        group:
          - 'test/front_login/contact.test.ts'

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # - name: Create ADMIN_DIR
    #   run: |
    #     sudo apt-fast install -y sharutils
    #     echo "ADMIN_DIR=$(head -c 10 < /dev/random | uuencode -m - | tail -n 2 |head -n 1 |  sed 's,[/+],_,g' | head -c10)/" >> $GITHUB_ENV

    - name: Apply patchs
      run: |
        git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
        git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
        git am zap/patches/0001-CSRF-OWASP-ZAP.patch

    - name: Setup to EC-CUBE
      env:
        DB: ${{ matrix.db }}
        USER: ${{ matrix.dbuser }}
        DBUSER: ${{ matrix.dbuser }}
        DBPASS: ${{ matrix.dbpass }}
        DBNAME: ${{ matrix.dbname }}
        DBPORT: ${{ matrix.dbport }}
        HTTP_URL: https://127.0.0.1:8085/
        HTTPS_URL: https://127.0.0.1:8085/
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 暫定対応
      run: |
        sudo chown -R 1001:1000 zap
        sudo chmod -R g+w zap
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml -f docker-compose.owaspzap.daemon.yml up -d
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T ec-cube composer install --ignore-platform-req=php
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T ec-cube composer config github-oauth.github.com ${GITHUB_TOKEN}
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T ec-cube composer require php5friends/phpunit48 "^4.8" --ignore-platform-req=php -W
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T ec-cube composer require symfony/yaml "^4.4" --ignore-platform-req=php -W
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T ec-cube composer require ec-cube2/cli "dev-work-with-eccube217@dev" --ignore-platform-req=php --dev -W
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T ec-cube composer require nanasess/eccube2-fixture-generator "dev-main@dev" --dev --ignore-platform-req=php -W
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T ec-cube php -ddisplay_errors=1 data/vendor/bin/eccube eccube:fixtures:generate --products=5 --customers=1 --orders=5
        docker-compose -f docker-compose.yml -f docker-compose.pgsql.yml -f docker-compose.dev.yml -f docker-compose.owaspzap.yml exec -T postgres psql --user=eccube_db_user eccube_db -c "UPDATE dtb_customer SET email = 'zap_user@example.com' WHERE customer_id = (SELECT MAX(customer_id) FROM dtb_customer WHERE status = 2 AND del_flg = 0);"

    - run: sleep 1
    - run: yarn install

    - name: Penetration testing
      env:
        GROUP: ${{ matrix.group }}
      run: yarn test:attack e2e-tests/${GROUP}

    # - name: Upload evidence
    #   if: failure()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: linux-php${{ matrix.php }}-${{ matrix.db }}-evidence
    #     path: ctests/_output/
    - env:
        GROUP: ${{ matrix.group }}
      if: always()
      run: echo "ARTIFACT_NAME=$(echo ${GROUP} | sed 's,/,_,g')" >> $GITHUB_ENV
    - name: Upload evidence
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: zap-${{ env.ARTIFACT_NAME}}-session
        path: zap/sessions

    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: linux-php${{ matrix.php }}-${{ matrix.db }}-logs
        path: data/logs
